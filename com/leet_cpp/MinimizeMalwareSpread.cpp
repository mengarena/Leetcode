/*

924. Minimize Malware Spread

In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.
Whenever two nodes are directly connected and at least one of those two nodes is infected by malware,
both nodes will be infected by malware.
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network,
after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes,
it may still be infected later as a result of the malware spread.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 
Note:
1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length

Hard

Amazon
*/


class Solution {
public:

    // 80%
    // From the number in initial list to infect the graph, and see from each source,
    // how many could be infected, and choose the one could infect most
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        int n = graph.size();
        int initCnt = initial.size();
        vector<int> infectedBy(n, -1);
        vector<int> infectedCnt(initCnt, 0);   // How many node from each number in initial list could infect

        int maxInfectedCnt = INT_MIN;
        int smalled = -1;
                
        for (int i=0; i<initCnt; ++i) {
            if (infectedBy[initial[i]] != -1) continue;
            int infected = 0;
            spread(graph, initial[i], initial[i], infected, infectedBy);
            
            infectedCnt[i] = infected;
            // Remember max and index
            if (maxInfectedCnt < infectedCnt[i]) {
                maxInfectedCnt = infectedCnt[i];
                smalled = initial[i];
            }
        }
        
        return smalled;
    }
    
    void spread(vector<vector<int>>& graph, int srcNode, int startNode, int& infectedCnt, vector<int>& infectedBy) {
        if (infectedBy[startNode] != -1) return;
        
        infectedCnt++;
        infectedBy[startNode] = srcNode;  // srcNode is the source of the infection
        
        for (int i=0; i<graph.size(); ++i) {
            if (graph[startNode][i] == 1 && i != srcNode && startNode != i && infectedBy[i] == -1) {
                spread(graph, srcNode, i, infectedCnt, infectedBy);
            }
        }
    }
};
